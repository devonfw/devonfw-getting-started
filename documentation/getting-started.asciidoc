= Getting Started

Hi there! 
We're devonfw and we've a goal. 
Our mission is to speed up the development of software.
The shared experience across software developers is that there are some major reasons for a slow development process:

- Reinventing the wheel over and over again
- Repetitive work that nobody likes to do but needs to be done
- Errors that you do not find and when you found them you grab you head saying: "We should have known that!"

In devonfw we're targeting exactly those issues by providing a shared and reusable experience base together with tools that just make your live easier.

image::images/devonfw_overview_small.drawio.svg[, width="350", devonfw_overview, link="images/devonfw_overview_small.drawio.svg"]

*Good Practices*

The good practices are the heart of devonfw. 
They are divided by technology stacks, because we found out that different approaches need to be considered when using Java, .net, node.js or Angular.
Some stacks are more concentrating on good documentation, others are focusing on reusable software components and we also provide completely bootstrapped applications that help you getting started immediately with an integrated set of good practices.

Check out the pages of your technology stack now!

*Tools*

Knowledge and code snippets do not always help you with reoccurring tasks that need to be performed or error prone setups.
This is where our tools come in. 
Take a look in our tool section to find all of our defined tools. Here are some highlights you should not miss:

devonfw-ide:: The devonfw-ide sets up an isolated development environment on your machine.
All tools you're using are locally installed in that isolated environment, so that your installations are not conflicting with different versions from other projects.
If needed you can even define the look of the environment in a central space and share it with your teammates so your onboarding of new developers is rapidly speed up and a consistent development experience is guaranteed.

CobiGen:: CobiGen is the smart generator you do not want to miss once used. Instead of generating plain files from a static model, it identifies the context from which you want to generate certain things. Image you could click on an Entity in your application and generate the repository, the TOs and the mappers out of it. CobiGen will do so. 

Solicitor:: Every project we've seen in the last decades has a lot of open source software usage. 
But the least of them keep track of the license obligations or do at all provide any kind of catalog what tools are in use.
Solicitor creates an inventory of your software and evaluates them based on a defined rule set.

*Jump In*

You're asking yourself now "Wow that's pretty cool, how can I use it?".
We thought you would and prepared some https://killercoda.com/devonfw[Killercoda tutorials] for you. 

We recommend to start with the https://github.com/devonfw/jump-the-queue[JumpTheQueue]  scenario. You can start by following the steps of the tutorial on the https://github.com/devonfw/jump-the-queue[github repository] or with our interactive tutorial 

https://killercoda.com/devonfw/scenario/JumpTheQueue[JumpTheQueue Killercoda Scenario]

If you're interested in a real world example completely build with devonfw, take a look at our link:guide-sample-application.asciidoc[sample application.]

include::introduction-why-should-i-use-devonfw[leveloffset=+1]

include::guide-sample-application[leveloffset=+1]

include::further-info-repo-overview[leveloffset=+1]

include::further-info-community-links[leveloffset=+1]
